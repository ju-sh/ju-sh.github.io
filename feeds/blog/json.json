{"version": "https://www.jsonfeed.org/version/1.1/", "title": "famubu's blog", "home_page_url": "{root}/blog/index.html", "feed_url": "https://ju-sh.github.io/feeds/blog/json.json", "description": "Software stuff, random musings...", "authors": [{"name": "famubu", "url": "https://ju-sh.github.io/index.html", "language": "en"}], "items": [{"id": "https://ju-sh.github.io/blog/panel-rsd7-iitpkd.html", "url": "https://ju-sh.github.io/blog/panel-rsd7-iitpkd.html", "title": "Panel discussion - RSD 7 @ IITPKD", "content_html": "<div id=\"content-container\">\n<p>Research scholars day of IIT Palakkad for the year 2025 (RSD 7) was\nheld between February 21st and 22nd. As part of this event, a panel\ndiscussion was held which went over matters related to research life.\nThe panel consisted of professors from IITPKD.</p>\n<p>This post is an outline of the thoughts from this session.\n(Occasionally augmented with my own comments. So this may not be exactly\nwhat was discussed.)</p>\n<ul>\n<li>Learn not just to answer a question but <strong>to ask the right\nquestion</strong>\n<ul>\n<li>Look at recent papers in your field</li>\n<li>Identify the common source of truth that these paper seems to derive\nfrom</li>\n<li>Start research from that point and figure how to arrive at that\nsource of truth</li>\n<li>ie, See what is the <strong>common direction of the papers</strong>\nbeing published and try to arrive at the source</li>\n<li>Remark: Hitchhiker's guide to galaxy quote\n<ul>\n<li>What is the answer to life, the universe, everything? 42.</li>\n<li>Then what is the meaning of the question ??!</li>\n<li>ie, before finding the answer, one should have a clear idea of the\nquestion.</li>\n</ul></li>\n</ul></li>\n<li>Number of publications vs quality of research\n<ul>\n<li>Quality should matter more than quantity</li>\n<li>Unfortunately, Quality is not quanitifiable</li>\n<li>Difficult for a group of people to rank papers based on quality</li>\n<li>Number is the only metric by which can be agreed upon by\neveryone</li>\n<li>For this reason, number of publications is often used to decide who\ngets promotion, funding, etc.</li>\n<li>Quality is not quanitifiable</li>\n<li>Suggestion: <strong>Focus on quality, but don't neglect\nquantity</strong>.</li>\n</ul></li>\n<li>About advisors potentially pushing student to publish review papers\n<ul>\n<li>Since review papers are much more likely to accumulate\ncitations</li>\n<li>Review papers is not original research, but is literature\nreview</li>\n<li>Suggestion:\n<ul>\n<li><strong>Literature review is a critical skill in\nresearch</strong></li>\n<li>But literature review must lead to new ideas being explored</li>\n<li>One shouldn't stick to writing review papers</li>\n<li>Like in the case quantity vs quality,</li>\n</ul></li>\n</ul></li>\n<li>Literature review\n<ul>\n<li>You should know the state of art before starting the actual\nwork</li>\n<li>Helps avoid duplication of effort</li>\n<li>You are likely to gain insights</li>\n</ul></li>\n<li>Finding a research topic\n<ul>\n<li>Seek something that you are passionate about</li>\n<li>Know more about it. Read literature. Talk to people working in that\ndomain.</li>\n<li>See how you can advance the state of the art.</li>\n<li>See what contribution can you make to make the work of future\nresearchers easier.</li>\n<li>Something that others can build on.</li>\n<li>ie, <strong>find something that you are passionate about and see how\nto make that better</strong></li>\n</ul></li>\n<li>Incremental research vs breakthroughs\n<ul>\n<li>Most research is incremental in nature</li>\n<li>A PhD work usually extends the boundaries of knowledge a little\nbit</li>\n<li>Although breakthrough ideas are nice, that is not for everyone.</li>\n<li>In maths, 10 mediocre theorems may be easier to prove than one big\ntheorem</li>\n<li>Method used by a panelist to identify a worthwhile proof:\n<ul>\n<li>Write the proof, keep it away for a few weeks.</li>\n<li>By now you probably can't recall the details of the proof.</li>\n<li>Come back and read what you wrote earlier.</li>\n<li>If you are amazed by the proof, it is great.</li>\n<li>Otherwise, it is mediocre.</li>\n</ul></li>\n</ul></li>\n<li>Importance of research collaboration\n<ul>\n<li>How to meet people: Attend conferences, summer schools,\nwebinars</li>\n<li>Establish connections while attending events\n<ul>\n<li>Send a mail</li>\n<li>If you have a concrete idea to work on, keep at it don't let\nlie</li>\n</ul></li>\n<li><strong>Collobrations should be with people whose expertise you can\ncomplement</strong>\n<ul>\n<li>This also allows both parties to better appreciate each.</li>\n</ul></li>\n<li>Both parties bring something new to the table, thereby achieving\nsomething that neither would've been able to achieve alone.</li>\n<li>Casual conversations sometimes lead to full blown\ncollaborations</li>\n<li>Story shared by a panelist:\n<ul>\n<li>Panelist published a paper in an interdisciplinary domain with a\ncollaborator</li>\n<li>The collaborator and the panelist were members of the mess committe\nof their institute</li>\n<li>While running an errand related to the mess (buying samosas), they\nhad a chat about their areas of research.</li>\n<li>This eventually led to a colloboration resulting in a paper.</li>\n<li>A professor in the audience remarked that this is another reason why\nstudents should consider joining the mess committee. :D</li>\n</ul></li>\n<li>Suggestions:\n<ul>\n<li>Talk about your research to anyone who would listen</li>\n<li>Ask about others' research and listen to anyone who has the time to\ntalk about their work.</li>\n</ul></li>\n</ul></li>\n<li>Knowing which journal to submit to:\n<ul>\n<li>It could help to know the expertise of editors before submitting to\njournal</li>\n<li>Even for good quality submissions, if the reviewer is not familiar\nwith the topic, they could judge it poorly.</li>\n</ul></li>\n<li>Role of AI/ML:\n<ul>\n<li>AI isn't everything, nor is it nothing</li>\n<li>It can make positive contributions\n<ul>\n<li>Eg: Chatgpt is capable of helping people make beamer slides</li>\n</ul></li>\n<li>These days applications of AIML is being helpful in almost every\ndomains</li>\n<li>To know the benefit of applying concepts or output from another\nfield, there should be interdisciplinary communication\n<ul>\n<li>Eg: Mechanical dept student should talk with CSE/Data science to\nlearn how AIML can help them automate some of their work.</li>\n</ul></li>\n<li>Disadvantage: Big applications like chatgpt is difficult for normal\npeople to run on their own.\n<ul>\n<li>Have to depend on vendors who could charge users.</li>\n</ul></li>\n<li>Whether it will take away jobs?\n<ul>\n<li>Probably.</li>\n<li>Once computers began to get popular, many jobs vanished</li>\n<li>But computers did make life better.</li>\n<li>Ideally, people should be capable of adapting to changing\nenvironment.</li>\n</ul></li>\n<li>Concern: What if people start depending on AI too much that they\n'forget' how to do the things that they come to depend on AI for?\n<ul>\n<li>Remark by panelist: Similar to a scenario in an Isaac Asimov\nnovel/story</li>\n<li>As in, there are inteliigent machines, but no human knows to build\none anymore.</li>\n<li>Not an invalid point, I guess.</li>\n<li>Use of computers and calculators has made mental arithmetic less\nnecessary.</li>\n<li>But people can now possibly use the time spent on mastering mental\narithmetic skills to do other work.</li>\n</ul></li>\n</ul></li>\n<li>Example of handling hostile paper reviews\n<ul>\n<li>Reviews are usually helpful</li>\n<li>If a review's tone is hostile, disregard the tone and use the\nfeedback itself if it makes sense.</li>\n<li>If the reviewer is being unnecessarily hostile, contact the\njournal's editor.</li>\n<li>Eg: A paper review mentioned that the submitter is arrogant because\nof the delay in incorporating suggested changes. Even though there was\nno direct communication between submitter and the reviewer.</li>\n</ul></li>\n</ul>\n<ul>\n<li>Finish your PhD as soon as possible\n<ul>\n<li>During a PhD, you will be making much less money that you would if\nyou were in the industry.</li>\n<li><strong>Every extra year you take to complete PhD is loss of great\namount of money and immense amount of wasted value in terms of\ntime</strong></li>\n<li>You do your best work when you are young</li>\n<li>Use your youth to do good work and gain experience</li>\n<li>When you get old, you are less likely to be energetic, but you can\nuse your experience to help collaborators and still get good work\ndone.</li>\n<li>Great insights are derived from past experiences</li>\n<li>ie, time is limited. Use it effectively.</li>\n</ul></li>\n</ul>\n<p>Interesting stuff:</p>\n<ul>\n<li>IEEE seems to have banned the world 'novel' from the titles of\npapers that it publishes\n<ul>\n<li>Probably due to too many papers using it.</li>\n<li>(Couldn't find the source)</li>\n</ul></li>\n<li>Joke?: Review of a 4 page write-up spanned 5 pages.</li>\n</ul>\n<p>No offense to real admirers of the work, but I got the impression\nthat some people are eager to reference Hitchhiker's guide to galaxy in\na bid to impress others.</p>\n<p>\u2014</p>\n<p>Thanks to:</p>\n<ul>\n<li>The students who organized the event</li>\n<li>Moderator: Dr. Albert Sunny</li>\n<li>Panelists:\n<ul>\n<li>Dr. Dinesh Jagadeeshan (Dept. of Chemistry)</li>\n<li>Dr. Jaikrishnan Janardhanan (Dept. of Mathematics)</li>\n<li>Dr. Kesavan D. (Dept. of Mechanical Engineering)</li>\n<li>Dr. Sabarimalai Manikandan (Dept. of Electrical Engineering)</li>\n</ul></li>\n</ul>\n<hr/>\n<p>Just for fun, here's the part from Hitchiker's guide to galaxy (book\nversion) mentioned earlier.</p>\n<p>From <em>The hitchhiker's guide to the galaxy</em> by Douglas\nAdams:</p>\n<blockquote>\n<p>\"Seventy-five thousand generations ago, our ancestors set this\nprogram in motion,\" the second man said, \"and in all that time we will\nbe the first to hear the computer speak.\"</p>\n<p>\"An awesome prospect, Phouchg,\" agreed the first man, and Arthur\nsuddenly realized that he was watching a recording with subtitles.</p>\n<p>\"We are the ones who will hear,\" said Phouchg, \"the answer to the\ngreat question of Life \u2026!\"<br/>\n\"The Universe \u2026!\" said Loonquawl.<br/>\n\"And Everything \u2026!\"<br/>\n\"Shhh,\" said Loonquawl with a slight gesture, \"I think Deep Thought is\npreparing to speak!\"</p>\n<p>There was a moment's expectant pause whilst panels slowly came to\nlife on the front of the console. Lights flashed on and off\nexperimentally and settled down into a businesslike pattern. A soft low\nhum came from the communication channel.</p>\n<p>\"Good morning,\" said Deep Thought at last.<br/>\n\"Er \u2026 Good morning, O Deep Thought,\" said Loonquawl nervously, \"do you\nhave \u2026 er, that is \u2026\"<br/>\n\"An answer for you?\" interrupted Deep Thought majestically. \"Yes. I\nhave.\"<br/>\nThe two men shivered with expectancy. Their waiting had not been in\nvain.<br/>\n\"There really is one?\" breathed Phouchg.<br/>\n\"There really is one,\" confirmed Deep Thought.<br/>\n\"To Everything? To the great Question of Life, the Universe and\nEverything?\"<br/>\n\"Yes.\"<br/>\nBoth of the men had been trained for this moment, their lives had been a\npreparation for it, they had been selected at birth as those who would\nwitness the answer, but even so they found themselves gasping and\nsquirming like excited children.<br/>\n\"And you're ready to give it to us?\" urged Loonquawl. \"I am.\"<br/>\n\"Now?\"<br/>\n\"Now,\" said Deep Thought.<br/>\nThey both licked their dry lips.<br/>\n\"Though I don't think,\" added Deep Thought, \"that you're going to like\nit.\"<br/>\n\"Doesn't matter!\" said Phouchg. \"We must know it! Now!\"<br/>\n\"Now?\" inquired Deep Thought.<br/>\n\"Yes! Now \u2026\"<br/>\n\"Alright,\" said the computer and settled into silence again. The two men\nfidgeted. The tension was unbearable.<br/>\n\"You're really not going to like it,\" observed Deep Thought.<br/>\n\"Tell us!\"<br/>\n\"Alright,\" said Deep Thought. \"The Answer to the Great Question \u2026\"<br/>\n\"Yes \u2026!\"<br/>\n\"Of Life, the Universe and Everything \u2026\" said Deep Thought.<br/>\n\"Yes \u2026!\"<br/>\n\"Is \u2026\" said Deep Thought, and paused.<br/>\n\"Yes \u2026!\"<br/>\n\"Is \u2026\"<br/>\n\"Yes \u2026!!!\u2026?\"<br/>\n\"Forty-two,\" said Deep Thought, with infinite majesty and calm.</p>\n<p>It was a long time before anyone spoke.<br/>\nOut of the corner of his eye Phouchg could see the sea of tense\nexpectant faces down in the square outside.</p>\n<p>\"We're going to get lynched aren't we?\" he whispered.<br/>\n\"It was a tough assignment,\" said Deep Thought mildly.<br/>\n\"Forty-two!\" yelled Loonquawl. \"Is that all you've got to show for seven\nand a half million years' work?\"<br/>\n\"I checked it very thoroughly,\" said the computer, \"and that quite\ndefinitely is the answer. I think the problem, to be quite honest with\nyou, is that you've never actually known what the question is.\"<br/>\n\"But it was the Great Question! The Ultimate Question of Life, the\nUniverse and Everything!\" howled Loonquawl.<br/>\n\"Yes,\" said Deep Thought with the air of one who suffers fools gladly,\n\"but what actually is it?\"</p>\n<p>A slow stupefied silence crept over the men as they stared at the\ncomputer and then at each other.</p>\n<p>\"Well, you know, it's just Everything \u2026 Everything \u2026\" offered Phouchg\nweakly.<br/>\n\"Exactly!\" said Deep Thought. \"So once you do know what the question\nactually is, you'll know what the answer means.\"</p>\n</blockquote>\n</div>", "summary": "Notes from the panel discussion held as part of RSD 7 at IITPKD", "date_published": "2025-03-11T00:00:00+00:00", "tags": ["outline"]}, {"id": "https://ju-sh.github.io/blog/open-hw.html", "url": "https://ju-sh.github.io/blog/open-hw.html", "title": "Hardware design with open source tools", "content_html": "<div id=\"content-container\">\n<p>As part of my masters course project, I generate verilog designs that\nare then synthesized using vivado before being loaded onto FPGAs.</p>\n<p>I once tried to see if open source tools can be used to achieve the\nsame.</p>\n<p>Spent some time looking up stuff like <a href=\"https://github.com/google/skywater-pdk\">Skywater-PDK</a> (being a\nhardware novice, I didn't realize for a while that PDK is for ASIC\ndesigns).</p>\n<p>Then I came across <a href=\"https://learn.lushaylabs.com/os-toolchain-manual-installation/\">this\narticle</a> which describes how a verilog design can be synthesised and\nloaded onto an FPGA. The board used was a <a href=\"https://dl.sipeed.com/shareURL/TANG/Nano%209K/6_Chip_Manual/EN\">Sipeed\nTang Nano 9K</a>.</p>\n<p>FOSS tools involved in this included:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Tool / Project</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Yosys</td>\n<td>Synthesis</td>\n</tr>\n<tr class=\"even\">\n<td>nextpnr</td>\n<td>Placement, routing, STA</td>\n</tr>\n<tr class=\"odd\">\n<td>Project apicula</td>\n<td>Bitstream generation</td>\n</tr>\n<tr class=\"even\">\n<td>openFPGALoader</td>\n<td>Bitstream loading</td>\n</tr>\n</tbody>\n</table>\n<p>I found a Sipeed Tang Nano 9K and tried doing the stuff the stuff\nmentioned in the article and it worked perfect!</p>\n<p>This blog post is a description of that experience.</p>\n<h2 id=\"the-board\">The board</h2>\n<p>First thing to do was to get an FPGA that is open-source friendly (or\nbecame so by community effort).</p>\n<p>After some time on the internet, I figured there were two options: a\nlattice FPGA or a gowin FPGA. I couldn't find a lattice FPGA anywhere\nbut could get my hands on an gowin FPGA. What more? The board was a\nSipeed Tang Nano 9K itself. It helped that gowin FPGAs are relatively\ncheap.</p>\n<p>Sipeed Tang Nano 9K is a board made by Sipeed, a company from China,\nand uses a Gowin FPGA. As the 'nano' in its name indicates, Tang Nano 9K\nis one of the smaller boards offered by Sipeed. It is one of the most\ncost effective boards with an FPGA available in the market that is\nsuitable for beginners.</p>\n<p>This board is powered by a GW1NR-9 FPGA (GW1NR-LV9QN88PC6/I5) made by\nGowin, again a Chinese company.<br/>\n(If it weren't for Chinese companies offering cheap boards, a lot of us\nwouldn't even see an FPGA.)</p>\n<p>Some of the specs of this board <a href=\"https://wiki.sipeed.com/hardware/en/tang/Tang-Nano-9K/Nano-9K.html\">\u02e1</a>\n<a href=\"https://www.gowinsemi.com/en/support/devkits_detail/43/\">\u02e1</a>:</p>\n<table>\n<tbody>\n<tr class=\"odd\">\n<td>LUTs</td>\n<td>8640 (LUT4)</td>\n</tr>\n<tr class=\"even\">\n<td>Registers / FFs</td>\n<td>6480</td>\n</tr>\n<tr class=\"odd\">\n<td>PLLs</td>\n<td>2</td>\n</tr>\n<tr class=\"even\">\n<td>Buttons</td>\n<td>2</td>\n</tr>\n<tr class=\"odd\">\n<td>LEDs</td>\n<td>6</td>\n</tr>\n<tr class=\"even\">\n<td>Crystal oscillator frequency</td>\n<td>27MHz</td>\n</tr>\n<tr class=\"odd\">\n<td>Hard core processor</td>\n<td>-NA-</td>\n</tr>\n<tr class=\"even\">\n<td>Debugging</td>\n<td>Onboard USB-JTAG, USB-UART</td>\n</tr>\n</tbody>\n</table>\n<p>A schematic of Sipeed Tang Nano 9K is available <a href=\"https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic\">here</a>.</p>\n<p>In the example design that we use, we would be using all 6 LEDs for\noutput.</p>\n<p>Gowin offers an IDE of its own which is free but still needs license\nlike Vivado. Since we are focusing on open source tools, we don't use\nthis.</p>\n<h2 id=\"flow\">Flow</h2>\n<h3 id=\"verilog-design\">Verilog design</h3>\n<p>We are using a simple 6-bit ring counter as an example. I got the\nverilog code for that as follows:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb1-1\"><a aria-hidden=\"true\" href=\"#cb1-1\" tabindex=\"-1\"></a><span class=\"kw\">module</span> counter</span>\n<span id=\"cb1-2\"><a aria-hidden=\"true\" href=\"#cb1-2\" tabindex=\"-1\"></a><span class=\"op\">(</span></span>\n<span id=\"cb1-3\"><a aria-hidden=\"true\" href=\"#cb1-3\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> clk<span class=\"op\">,</span></span>\n<span id=\"cb1-4\"><a aria-hidden=\"true\" href=\"#cb1-4\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> led</span>\n<span id=\"cb1-5\"><a aria-hidden=\"true\" href=\"#cb1-5\" tabindex=\"-1\"></a><span class=\"op\">);</span></span>\n<span id=\"cb1-6\"><a aria-hidden=\"true\" href=\"#cb1-6\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a aria-hidden=\"true\" href=\"#cb1-7\" tabindex=\"-1\"></a><span class=\"co\">// 27M cycles for 1 second</span></span>\n<span id=\"cb1-8\"><a aria-hidden=\"true\" href=\"#cb1-8\" tabindex=\"-1\"></a><span class=\"dt\">localparam</span> WAIT_TIME <span class=\"op\">=</span> <span class=\"dv\">27000000</span><span class=\"op\">;</span></span>\n<span id=\"cb1-9\"><a aria-hidden=\"true\" href=\"#cb1-9\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-10\"><a aria-hidden=\"true\" href=\"#cb1-10\" tabindex=\"-1\"></a><span class=\"co\">// Set initial value of cycle counter</span></span>\n<span id=\"cb1-11\"><a aria-hidden=\"true\" href=\"#cb1-11\" tabindex=\"-1\"></a><span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">23</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> clockCounter <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb1-12\"><a aria-hidden=\"true\" href=\"#cb1-12\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-13\"><a aria-hidden=\"true\" href=\"#cb1-13\" tabindex=\"-1\"></a><span class=\"co\">// Indicates currently active LED</span></span>\n<span id=\"cb1-14\"><a aria-hidden=\"true\" href=\"#cb1-14\" tabindex=\"-1\"></a><span class=\"co\">// Initially, first LED is lit</span></span>\n<span id=\"cb1-15\"><a aria-hidden=\"true\" href=\"#cb1-15\" tabindex=\"-1\"></a><span class=\"dt\">reg</span> <span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> ledCounter <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb1-16\"><a aria-hidden=\"true\" href=\"#cb1-16\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-17\"><a aria-hidden=\"true\" href=\"#cb1-17\" tabindex=\"-1\"></a><span class=\"kw\">always</span> <span class=\"op\">@(</span><span class=\"kw\">posedge</span> clk<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb1-18\"><a aria-hidden=\"true\" href=\"#cb1-18\" tabindex=\"-1\"></a>    <span class=\"co\">// Step up cycle counter</span></span>\n<span id=\"cb1-19\"><a aria-hidden=\"true\" href=\"#cb1-19\" tabindex=\"-1\"></a>    clockCounter <span class=\"op\">&lt;=</span> clockCounter <span class=\"op\">+</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb1-20\"><a aria-hidden=\"true\" href=\"#cb1-20\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-21\"><a aria-hidden=\"true\" href=\"#cb1-21\" tabindex=\"-1\"></a>    <span class=\"kw\">if</span> <span class=\"op\">(</span>clockCounter <span class=\"op\">==</span> WAIT_TIME<span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb1-22\"><a aria-hidden=\"true\" href=\"#cb1-22\" tabindex=\"-1\"></a>        <span class=\"co\">// Reset cycle counter once 1s is up</span></span>\n<span id=\"cb1-23\"><a aria-hidden=\"true\" href=\"#cb1-23\" tabindex=\"-1\"></a>        clockCounter <span class=\"op\">&lt;=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb1-24\"><a aria-hidden=\"true\" href=\"#cb1-24\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-25\"><a aria-hidden=\"true\" href=\"#cb1-25\" tabindex=\"-1\"></a>        <span class=\"co\">// Register change in active LED</span></span>\n<span id=\"cb1-26\"><a aria-hidden=\"true\" href=\"#cb1-26\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>ledCounter <span class=\"op\">==</span> <span class=\"dv\">0</span><span class=\"op\">)</span></span>\n<span id=\"cb1-27\"><a aria-hidden=\"true\" href=\"#cb1-27\" tabindex=\"-1\"></a>          ledCounter <span class=\"op\">&lt;=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb1-28\"><a aria-hidden=\"true\" href=\"#cb1-28\" tabindex=\"-1\"></a>        <span class=\"kw\">else</span></span>\n<span id=\"cb1-29\"><a aria-hidden=\"true\" href=\"#cb1-29\" tabindex=\"-1\"></a>          ledCounter <span class=\"op\">&lt;=</span> ledCounter <span class=\"op\">&lt;&lt;</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb1-30\"><a aria-hidden=\"true\" href=\"#cb1-30\" tabindex=\"-1\"></a>    <span class=\"kw\">end</span></span>\n<span id=\"cb1-31\"><a aria-hidden=\"true\" href=\"#cb1-31\" tabindex=\"-1\"></a><span class=\"kw\">end</span></span>\n<span id=\"cb1-32\"><a aria-hidden=\"true\" href=\"#cb1-32\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-33\"><a aria-hidden=\"true\" href=\"#cb1-33\" tabindex=\"-1\"></a><span class=\"co\">// Update change in active LED</span></span>\n<span id=\"cb1-34\"><a aria-hidden=\"true\" href=\"#cb1-34\" tabindex=\"-1\"></a><span class=\"kw\">assign</span> led <span class=\"op\">=</span> <span class=\"op\">~</span>ledCounter<span class=\"op\">;</span></span>\n<span id=\"cb1-35\"><a aria-hidden=\"true\" href=\"#cb1-35\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<p>There is no input other than clock. 6 output signals are activated\none by one, one at a time, with a delay of 1 second when operated at\n27MHz frequency. These output signals are meant to be mapped to\nLEDs.</p>\n<p>(<code>iverilog</code> can be used for simulation with a test bench\nor to just play around with the verilog file.)</p>\n<h3 id=\"synthesis-yosys\">Synthesis (<code>yosys</code>)</h3>\n<p>yosys is used to convert the verilog design into corresponding\nnetlist containing data needed for placement and routing.</p>\n<pre><code>yosys -p \"read_verilog counter.v; synth_gowin -top counter -json counter.json\"\n</code></pre>\n<p>This tells yosys to read the verilog file, run synthesis targeting a\ngowin FPGA where top module is named <code>counter</code> and write\nresults into a file named <code>counter.json</code>. yosys will perform\noptimizations, techmap, etc.</p>\n<p>Output of synthesis is a netlist. The contents of\n<code>counter.json</code> is a form of netlist.</p>\n<p>We can use the <code>synth_gowin</code> command here thanks to yosys\nproviding support for gowin FPGAs out of the box.\n<code>synth_gowin</code> is actually short for a bunch of yosys\ncommands. I've included these commands in the addendum of this post.</p>\n<p>The <code>counter.json</code> will contain information like mapping\nof blocks to FPGA components.</p>\n<p>The <code>synth_gowin</code> command includes <a href=\"https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/stat.html\"><code>stat</code></a>\ncommand of yosys, which prints resource utilzation data like number of\nregisters needed.</p>\n<p>A sample report looks like this:</p>\n<pre><code>=== counter ===\n\n   Number of wires:                 78\n   Number of wire bits:            127\n   Number of public wires:          78\n   Number of public wire bits:     127\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 87\n     ALU                            30\n     DFFE                            6\n     DFFR                           24\n     GND                             1\n     IBUF                            1\n     LUT1                            9\n     LUT4                            7\n     MUX2_LUT5                       2\n     OBUF                            6\n     VCC                             1\n</code></pre>\n<p>I didn't know what many of these abbreviations meant. So looked up\nsome of them <a href=\"https://www.gowinsemi.com/upload/database_doc/39/document/5bfcff2ce0b72.pdf\">at\na gowin user guide</a>.</p>\n<ul>\n<li>DFFE: D-FF with clock enable (positive-edge triggered)</li>\n<li>DFFR: D-FF with synchronous reset (positive-edge triggered)</li>\n<li>ALU: 2-input ALU</li>\n<li>IOBUF: Input/Ouput buffer (depending on a control bit, either input\nor output is done)</li>\n<li>LUT1: 1-input LUT. Used for a buffer or as an inverter</li>\n</ul>\n<h3 id=\"placement-and-routing-nextpnr\">Placement and routing\n(<code>nextpnr</code>)</h3>\n<p>nextpnr is used to perform placement and routing after synthesis\nbased on the information generated by yosys. It offers a gowin-specific\ncommand: <code>nextpnr-gowin</code>.</p>\n<pre><code>nextpnr-gowin \\\n  --json counter.json \\             # Info from yosys\n  --freq 27 \\                       # Desired frequency in MHz\n  --write counter_pnr.json \\        # Output file\n  --device GW1NR-LV9QN88PC6/I5 \\    # Target FPGA info\n  --family GW1N-9C \\                # Target FPGA family\n  --cst tangnano9k.cst              # Physical constraints file\n</code></pre>\n<p>The constraints file say which pins are to be mapped to what. In our\ncase, its contents are as follows:</p>\n<pre><code>IO_LOC \"clk\" 52;\nIO_PORT \"clk\" PULL_MODE=UP;\nIO_LOC \"led[0]\" 10;\nIO_LOC \"led[1]\" 11;\nIO_LOC \"led[2]\" 13;\nIO_LOC \"led[3]\" 14;\nIO_LOC \"led[4]\" 15;\nIO_LOC \"led[5]\" 16;\n</code></pre>\n<p>which specifies the ports for clock and the LEDs.</p>\n<p>The port numbers are available from the schematics of the gowin Tang\nnano 9K FPGA. I could find such a schematic <a href=\"https://dl.sipeed.com/shareURL/TANG/Nano%209K/2_Schematic\">here</a>.</p>\n<p>Above nextpnr command would write the information about the placed\nand routed design to a file named <code>counter_pnr.json</code>. The\ncontents of this file is a netlist with placement and routing info.</p>\n<p>First, nextpnr produces an FPGA-specific utilization report:</p>\n<pre><code>Info: Device utilisation:\nInfo:                    VCC:     1/    1   100%\nInfo:                  SLICE:    79/ 8640     0%\nInfo:                    IOB:     7/  274     2%\nInfo:                 OSER16:     0/   38     0%\nInfo:                 IDES16:     0/   38     0%\nInfo:                IOLOGIC:     0/  296     0%\nInfo:              MUX2_LUT5:     2/ 4320     0%\nInfo:              MUX2_LUT6:     0/ 2160     0%\nInfo:              MUX2_LUT7:     0/ 1080     0%\nInfo:              MUX2_LUT8:     0/ 1056     0%\nInfo:                    GND:     1/    1   100%\nInfo:                   RAMW:     0/  270     0%\nInfo:                    OSC:     0/    1     0%\nInfo:                   rPLL:     0/    2     0%\n</code></pre>\n<p>Looks like it needed only two 5-input LUTs. I guess, the 7 IOBs are\nthe 6 LEDs and the input clock. But I'm not sure how the number of\nslices is 79.</p>\n<p>Abbreviations<a href=\"https://www.gowinsemi.com/upload/database_doc/39/document/5bfcff2ce0b72.pdf\">\u02e1</a>:</p>\n<ul>\n<li>MUX2-LUTn: n-input LUT made with MUX2 and LUT4.</li>\n<li>ISERn: 1-to-n deserializer</li>\n<li>OSERn: n-to-1 serializer</li>\n<li>OSC: Oscillator</li>\n</ul>\n<p>(Couldn't find what RAMW means..)</p>\n<p>nextpnr is 'timing driven'. ie, it does some form of static timing\nanalysis by itself. Every path in the netlist that starts from a FF and\nends at another FF is analysed.</p>\n<p>(nextpnr can be asked to output a report in json format with\n<code>--report</code>. <a href=\"https://github.com/YosysHQ/nextpnr/blob/master/docs/report.md\">\u1d48</a>)</p>\n<p>nextpnr architechture is something like this (this is an ascii-art\nversion of an image from <a href=\"https://fpga-ignite.github.io/fpga_ignite_202/nextpnr/FPGA_Ignite_nextpnr.pdf\">here</a>):</p>\n<pre><code>+----------+     +--------+\n|  JSON    |--&gt;--| Packer |\n|front end |     +--------+\n+----------+         |          +--------+\n                     v          | Timing |\n                     |          |  model |\n                     |          +--------+\n                 +--------+         |  \n         +---&gt;---| Placer |--&lt;--+   v\n         |       +--------+     |   |\n     +------+        |       +----------+\n     | Chip |        v       |  Timing  |\n     | data |        |       | analysis |\n     +------+        |       +----------+\n         |       +--------+     |        \n         +---&gt;---| Router |--&lt;--+  \n                 +--------+\n                     |\n                     v\n</code></pre>\n<p>where timing model, chip-data and packer varies with the target\nboard.</p>\n<p>I used to think that timing analysis cannot be done before routing.\nBut turns out that isn't the case. My wild guess is that paths can be\ninferred from the netlist that yosys generated since it specifies the\npaths in some form anyway. The separate routing proces can create more\nefficient paths specific to target board.</p>\n<p>This was the slack histogram that nextpnr gave post-placement but\npre-routing:</p>\n<pre><code>Info: Max frequency for clock 'clk_IBUF_I_O': 316.86 MHz (PASS at 27.00 MHz)\n\nInfo: Max delay posedge clk_IBUF_I_O -&gt; &lt;async&gt;: 6.69 ns\n\nInfo: Slack histogram:\nInfo:  legend: * represents 1 endpoint(s)\nInfo:          + represents [1,1) endpoint(s)\nInfo: [ 33881,  33996) |***************************\nInfo: [ 33996,  34111) |\nInfo: [ 34111,  34226) |\nInfo: [ 34226,  34341) |\nInfo: [ 34341,  34456) |\nInfo: [ 34456,  34571) |\nInfo: [ 34571,  34686) |*\nInfo: [ 34686,  34801) |*\nInfo: [ 34801,  34916) |\nInfo: [ 34916,  35031) |\nInfo: [ 35031,  35146) |\nInfo: [ 35146,  35261) |\nInfo: [ 35261,  35376) |\nInfo: [ 35376,  35491) |\nInfo: [ 35491,  35606) |\nInfo: [ 35606,  35721) |\nInfo: [ 35721,  35836) |\nInfo: [ 35836,  35951) |\nInfo: [ 35951,  36066) |\nInfo: [ 36066,  36181) |*\nInfo: Checksum: 0xb9798815\n</code></pre>\n<p>The slack histogram groups slacks (in ps) into ranges and show how\nmany paths fit in each of the ranges.</p>\n<p>In the above histogram, there are 27 asterisks next to <code>[ 33881,\n33996)</code> which means that there are 27 paths whose slack is greater\nthan or equal to 33.881ns but less than 33.996ns.</p>\n<p>The histogram would show negative values if there was negative slack.\nNo negative slack. Yay!</p>\n<p>After doing placement and associated timing analysis, nextpnr will do\nrouting.</p>\n<p>As it tries various routes, it will show what it's upto by printing\nstuff like this:</p>\n<pre><code>Info: Routing..\nInfo: Setting up routing queue.\nInfo: Routing 225 arcs.\nInfo:            |   (re-)routed arcs  |   delta    | remaining|       time spent     |\nInfo:    IterCnt |  w/ripup   wo/ripup |  w/r  wo/r |      arcs| batch(sec) total(sec)|\nInfo:        426 |      200        226 |  200   226 |         0|       1.82       1.82|\nInfo: Routing complete.\nInfo: Router1 time 1.82s\nInfo: Checksum: 0x756ec238\n</code></pre>\n<p>('ripup and reroute' is the name of a class of routing algorithms. <a href=\"https://en.wikipedia.org/wiki/Routing_(electronic_design_automation)\">\u02b7</a>)</p>\n<p>An <a href=\"https://github.com/YosysHQ/nextpnr/blob/master/docs/faq.md\">arc</a>\nis a 'source-sink pair on a net' or a 'directed connection between two\nnodes'. Looks like there were 225 of them in the netlist and nextpnr\nspent 1.82 seconds performing 426 iterations.</p>\n<p>Once routing is done, nextpnr will perform timing analysis once\nagain.</p>\n<pre><code>Info: Critical path report for cross-domain path 'posedge clk_IBUF_I_O' -&gt; '&lt;async&gt;':\nInfo: curr total\nInfo:  0.5  0.5  Source ledCounter_DFFE_Q_DFFLC.Q\nInfo:  1.9  2.4    Net ledCounter[5] (3,17) -&gt; (1,22)\nInfo:                Sink ledCounter_LUT1_I0_3_LC.A\nInfo:                Defined in:\nInfo:                  counter.v:8.11-8.21\nInfo:  1.0  3.4  Source ledCounter_LUT1_I0_3_LC.F\nInfo:  1.4  4.8    Net led_OBUF_O_I[5] (1,22) -&gt; (0,25)\nInfo:                Sink led_OBUF_O$iob.I\nInfo: 1.5 ns logic, 3.4 ns routing\n\nInfo: Max frequency for clock 'clk_IBUF_I_O': 315.86 MHz (PASS at 27.00 MHz)\n\nInfo: Max delay posedge clk_IBUF_I_O -&gt; &lt;async&gt;: 4.84 ns\n\nInfo: Slack histogram:\nInfo:  legend: * represents 1 endpoint(s)\nInfo:          + represents [1,1) endpoint(s)\nInfo: [ 33871,  33991) |*\nInfo: [ 33991,  34111) |\nInfo: [ 34111,  34231) |*\nInfo: [ 34231,  34351) |******\nInfo: [ 34351,  34471) |\nInfo: [ 34471,  34591) |*********\nInfo: [ 34591,  34711) |**********\nInfo: [ 34711,  34831) |*\nInfo: [ 34831,  34951) |*\nInfo: [ 34951,  35071) |\nInfo: [ 35071,  35191) |\nInfo: [ 35191,  35311) |\nInfo: [ 35311,  35431) |\nInfo: [ 35431,  35551) |\nInfo: [ 35551,  35671) |\nInfo: [ 35671,  35791) |\nInfo: [ 35791,  35911) |\nInfo: [ 35911,  36031) |\nInfo: [ 36031,  36151) |\nInfo: [ 36151,  36271) |*\n</code></pre>\n<p>Hmm.. Not sure if I'm reading this correctly, but from the histograms\nalone, it looks as if total slack actually went up after routing\u2026</p>\n<p>Still the value shown as 'Max delay posedge\n<code>clk_IBUF_I_O</code>' has gone down to 4.84ns from 6.69ns.</p>\n<p>Yet the max frequency of the clock went down a bit to 315.86MHz from\n316.86MHz.</p>\n<p>We had requested the design to be run at 27MHz. nextpnr figures it\ncan be run even at 315.86MHz (Fmax), so we are good in that aspect.</p>\n<p>I have not yet figured out how the histogram is meant to be read.\nThis histogram is not that intriguing since it is a tiny design.\nHistograph for a relatively less trivial design is shown <a href=\"https://github.com/YosysHQ/nextpnr/pull/31\">here</a>.</p>\n<p>nextpnr also has a gui that is not part of default installation which\ncan provide visualizations of placed and routed nets. I have not used it\nyet, but it looks nice.</p>\n<h3 id=\"bitstream-generation-project-apicula\">Bitstream generation\n(Project Apicula)</h3>\n<p>Now that we have all the information needed for a loadable FPGA\ndesign, we convert the data into a bit stream that can then actually\nloaded onto the FPGA.</p>\n<p>For this we need to know the bitstream format used by the FPGA.\nUsually FPGA vendors are not enthusiastic about revealing this\ninformation to the public.</p>\n<p>(Found a <a href=\"https://news.ycombinator.com/item?id=10653179\">hackernews\ndiscussion on the topic</a> which was in response to <a href=\"http://www.megacz.com/thoughts/bitstream.secrecy.html\">this\npost</a> suggesting that there's little point in keeping bitstream\nformat secret.)</p>\n<p>There have been many attempts to document the bitstream formats of\ndifferent architectures over the years.</p>\n<p>Examples include:</p>\n<ul>\n<li><a href=\"https://github.com/YosysHQ/prjtrellis\">Project Trellis</a>:\nLattice ECP5</li>\n<li><a href=\"https://github.com/YosysHQ/icestorm\">Project IceStorm</a>:\nLattice iCE40</li>\n<li><a href=\"https://github.com/f4pga/prjxray\">Project X-Ray</a>: Xilinx\n7-series</li>\n</ul>\n<p><a href=\"https://github.com/YosysHQ/apicula\">Project apicula</a> is\nan effort that successfully managed to figure out the bitstream format\nof a class of gowin FPGAs that includes the one used by Sipeed Tang Nano\n9K, which is what we are using.</p>\n<p>The tools for apicula can be obtained by installing a python package\ncalled <code>apycula</code>.</p>\n<pre><code>pip3 install apycula\n</code></pre>\n<p><code>apycula</code> offers the <code>gowin_pack</code> to generate\nbitstream. In our case, it can be used like:</p>\n<pre><code>gowin_pack \\\n  -d GW1N-9C \\      # Target FPGA family\n  -o counter.fs \\   # Output file with bitstream\n  counter_pnr.json  # Input file with info from nextpnr\n</code></pre>\n<p>The <code>counter.fs</code> file is the generated bitstream.</p>\n<p>(I tried opening this file in a text editor. Was expecting\ngibberish-like strings, but it was literally showing as a bunch 0s and\n1s.)</p>\n<h3 id=\"loading-bitstream-to-fpga-openfpgaloader\">Loading bitstream to\nFPGA (<code>openFPGALoader</code>)</h3>\n<p>Once we have the bitstream file, we can load it on to our FPGA with\nopenfpgaloader.</p>\n<pre><code>openFPGALoader \\\n  -b tangnano9k \\  # Board name\n  -f counter.fs \\  # Bitstream to be loaded\n</code></pre>\n<p>But before this command can work, something needs to be done inorder\nfor openfpgaloader to be able to detect connected FPGA connected to the\ncomputer.</p>\n<p>Otherwise we can get errors like this:</p>\n<pre><code>$ openFPGALoader -b tangnano9k -f counter.fs\nempty\nwrite to flash\nunable to open ftdi device: -3 (device not found)\nJTAG init failed with: unable to open ftdi device\n\n\n$ ls /dev/ttyUSB*\n/dev/ttyUSB0  /dev/ttyUSB1\n</code></pre>\n<p>The developer of openfpgaloader themselves <a href=\"https://trabucayre.github.io/openFPGALoader/guide/install.html\">has\ngot a blog post</a> on getting around this error.</p>\n<p>What we could do is to use udev rules:</p>\n<pre><code>$ sudo cp 99-openfpgaloader.rules /etc/udev/rules.d/\n\n$ ls /etc/udev/rules.d/\n52-xilinx-digilent-usb.rules  52-xilinx-ftdi-usb.rules  52-xilinx-pcusb.rules  99-openfpgaloader.rules\n\n$ sudo udevadm control --reload-rules\n$ sudo udevadm trigger\n$ sudo usermod -a $USER -G plugdev\n</code></pre>\n<p>The rule file (<code>99-openfpgaloader.rules</code>) file can be\nobtained from <a href=\"https://github.com/trabucayre/openFPGALoader/blob/master/99-openfpgaloader.rules\">here</a>.</p>\n<p>Once that's done, it should be smooth sailing. We can flash the FPGA\nwith:</p>\n<pre><code>$ openFPGALoader -b tangnano9k -f counter.fs\nempty\nwrite to flash\nJtag frequency : requested 6.00MHz   -&gt; real 6.00MHz\nParse file Parse counter.fs:\nDone\nDONE\nJtag frequency : requested 2.50MHz   -&gt; real 2.00MHz\nErase SRAM DONE\nErase FLASH DONE\nErasing FLASH: [==================================================] 100.00%\nDone\nwrite Flash: [==================================================] 100.00%\nDone\nCRC check : FAIL\nRead: 0x0000431b checksum: 0xb4bb\n</code></pre>\n<p>I still have not figured out why the 'CRC check FAIL' is showing up,\nbut it does not seem to prevent the bitstream being loaded onto the\nFPGA.</p>\n<p>Once the FPGA is powered on, we can see the LED light blinking\none-by-one, one-at-a-time.</p>\n<p>:-)</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The 6-bit ring counter design we used is tiny and simple. One got to\ntry larger designs to get a better feel of how it works.</p>\n<p>It is helpful to have a Makefile to run the commands. I made one\nlike:</p>\n<pre><code>NAME=counter\nBOARD=tangnano9k\nFAMILY=GW1N-9C\nDEVICE=GW1NR-LV9QN88PC6/I5\n\nall: $(NAME).fs\n\nsynth: $(NAME).v\n    yosys -p \"read_verilog $(NAME).v; synth_gowin -top $(NAME) -json $(NAME).json\"\n\npnr: $(NAME).json\n    nextpnr-gowin --json $(NAME).json --freq 1 --write $(NAME)_pnr.json \\\n        --device $(DEVICE) --family $(FAMILY) --cst $(BOARD).cst\n\nbits: $(NAME)_pnr.json\n    gowin_pack -d $(FAMILY) -o $(NAME).fs $(NAME)_pnr.json\n\nload: $(NAME).fs\n    openFPGALoader -b $(BOARD) -f $(NAME).fs\n</code></pre>\n<p>Versions of software used:</p>\n<ul>\n<li>Yosys: 0.38 (git sha1 543faed9c8c, gcc 13.2.0 -fPIC -Os)</li>\n<li>nextpnr: 0.7</li>\n<li>Apycula: 0.12</li>\n<li>openFPGALoader: 0.12.1</li>\n</ul>\n<p>Also see: <a href=\"https://arxiv.org/abs/1903.10407\">Yosys+nextpnr:\nan Open Source Framework from Verilog to Bitstream for Commercial\nFPGAs</a> - David Shah, Eddie Hung, Clifford Wolf, Serge Bazanski, Dan\nGisselquist, Miodrag Milanovi\u0107 (2019)</p>\n<h2 id=\"addendum\">Addendum</h2>\n<h3 id=\"commands-corresponding-to-synth_gowin-of-yosys\">Commands\ncorresponding to <code>synth_gowin</code> of yosys</h3>\n<p>As mentioned in the <a href=\"https://yosys.readthedocs.io/_/downloads/en/latest/pdf/\">manual</a>,\n<code>synth_gowin</code> stands for:</p>\n<pre><code># yosys&gt; help synth_gowin\n\n    begin:\n        read_verilog -specify -lib +/gowin/cells_sim.v\n        read_verilog -specify -lib +/gowin/cells_xtra.v\n        hierarchy -check -top &lt;top&gt;\n\n    flatten:    (unless -noflatten)\n        proc\n        flatten\n        tribuf -logic\n        deminout\n\n    coarse:\n        synth -run coarse [-no-rw-check]\n\n    map_ram:\n        memory_libmap -lib +/gowin/lutrams.txt -lib +/gowin/brams.txt [-no-auto-block] [-no-auto-distributed]    (-no-auto-block if -nobram, -no-auto-distributed if -nolutram)\n        techmap -map +/gowin/lutrams_map.v -map +/gowin/brams_map.v\n\n    map_ffram:\n        opt -fast -mux_undef -undriven -fine\n        memory_map\n        opt -undriven -fine\n\n    map_gates:\n        techmap -map +/techmap.v -map +/gowin/arith_map.v\n        opt -fast\n        abc -dff -D 1    (only if -retime)\n        iopadmap -bits -inpad IBUF O:I -outpad OBUF I:O -toutpad TBUF ~OEN:I:O -tinoutpad IOBUF ~OEN:O:I:IO    (unless -noiopads)\n\n    map_ffs:\n        opt_clean\n        dfflegalize -cell $_DFF_?_ 0 -cell $_DFFE_?P_ 0 -cell $_SDFF_?P?_ r -cell $_SDFFE_?P?P_ r -cell $_DFF_?P?_ r -cell $_DFFE_?P?P_ r\n        techmap -map +/gowin/cells_map.v\n        opt_expr -mux_undef\n        simplemap\n\n    map_luts:\n        read_verilog -icells -lib -specify +/abc9_model.v\n        abc9 -maxlut 8 -W 500\n        clean\n\n    map_cells:\n        techmap -map +/gowin/cells_map.v\n        opt_lut_ins -tech gowin\n        setundef -undriven -params -zero\n        hilomap -singleton -hicell VCC V -locell GND G\n        splitnets -ports    (only if -vout used)\n        clean\n        autoname\n\n    check:\n        hierarchy -check\n        stat\n        check -noinit\n        blackbox =A:whitebox\n\n    vout:\n        write_verilog -simple-lhs -decimal -attr2comment -defparam -renameprefix gen &lt;file-name&gt;\n        write_json &lt;file-name&gt;\n</code></pre>\n<h3 id=\"techmap-stuff\">Techmap stuff</h3>\n<p>I guess files like the one at\n<code>/usr/share/yosys/gowin/cells_map.v</code> are used for\ntechmap.</p>\n<p>Its contents were like:</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode verilog\"><code class=\"sourceCode verilog\"><span id=\"cb19-1\"><a aria-hidden=\"true\" href=\"#cb19-1\" tabindex=\"-1\"></a><span class=\"co\">// DFFR          D Flip-Flop with Synchronous Reset</span></span>\n<span id=\"cb19-2\"><a aria-hidden=\"true\" href=\"#cb19-2\" tabindex=\"-1\"></a><span class=\"kw\">module</span>  \\<span class=\"dt\">$_SDFF_PP0_</span> <span class=\"op\">(</span><span class=\"dt\">input</span> D<span class=\"op\">,</span> C<span class=\"op\">,</span> R<span class=\"op\">,</span> <span class=\"dt\">output</span> Q<span class=\"op\">);</span></span>\n<span id=\"cb19-3\"><a aria-hidden=\"true\" href=\"#cb19-3\" tabindex=\"-1\"></a>    DFFR _TECHMAP_REPLACE_ <span class=\"op\">(</span>.D<span class=\"op\">(</span>D<span class=\"op\">),</span> .Q<span class=\"op\">(</span>Q<span class=\"op\">),</span> .CLK<span class=\"op\">(</span>C<span class=\"op\">),</span> .RESET<span class=\"op\">(</span>R<span class=\"op\">));</span></span>\n<span id=\"cb19-4\"><a aria-hidden=\"true\" href=\"#cb19-4\" tabindex=\"-1\"></a>    <span class=\"dt\">wire</span> _TECHMAP_REMOVEINIT_Q_ <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb19-5\"><a aria-hidden=\"true\" href=\"#cb19-5\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span>\n<span id=\"cb19-6\"><a aria-hidden=\"true\" href=\"#cb19-6\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-7\"><a aria-hidden=\"true\" href=\"#cb19-7\" tabindex=\"-1\"></a><span class=\"co\">// ..</span></span>\n<span id=\"cb19-8\"><a aria-hidden=\"true\" href=\"#cb19-8\" tabindex=\"-1\"></a><span class=\"co\">// ..</span></span>\n<span id=\"cb19-9\"><a aria-hidden=\"true\" href=\"#cb19-9\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-10\"><a aria-hidden=\"true\" href=\"#cb19-10\" tabindex=\"-1\"></a><span class=\"kw\">module</span> \\<span class=\"dt\">$lut</span> <span class=\"op\">(</span>A<span class=\"op\">,</span> Y<span class=\"op\">);</span></span>\n<span id=\"cb19-11\"><a aria-hidden=\"true\" href=\"#cb19-11\" tabindex=\"-1\"></a>    <span class=\"dt\">parameter</span> WIDTH <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb19-12\"><a aria-hidden=\"true\" href=\"#cb19-12\" tabindex=\"-1\"></a>    <span class=\"dt\">parameter</span> LUT <span class=\"op\">=</span> <span class=\"dv\">0</span><span class=\"op\">;</span></span>\n<span id=\"cb19-13\"><a aria-hidden=\"true\" href=\"#cb19-13\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-14\"><a aria-hidden=\"true\" href=\"#cb19-14\" tabindex=\"-1\"></a>    <span class=\"op\">(</span>* force_downto *<span class=\"op\">)</span></span>\n<span id=\"cb19-15\"><a aria-hidden=\"true\" href=\"#cb19-15\" tabindex=\"-1\"></a>    <span class=\"dt\">input</span> <span class=\"op\">[</span>WIDTH<span class=\"dv\">-1</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]</span> A<span class=\"op\">;</span></span>\n<span id=\"cb19-16\"><a aria-hidden=\"true\" href=\"#cb19-16\" tabindex=\"-1\"></a>    <span class=\"dt\">output</span> Y<span class=\"op\">;</span></span>\n<span id=\"cb19-17\"><a aria-hidden=\"true\" href=\"#cb19-17\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-18\"><a aria-hidden=\"true\" href=\"#cb19-18\" tabindex=\"-1\"></a>    <span class=\"kw\">generate</span></span>\n<span id=\"cb19-19\"><a aria-hidden=\"true\" href=\"#cb19-19\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">1</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-20\"><a aria-hidden=\"true\" href=\"#cb19-20\" tabindex=\"-1\"></a>            LUT1 #<span class=\"op\">(</span>.INIT<span class=\"op\">(</span>LUT<span class=\"op\">))</span> _TECHMAP_REPLACE_ <span class=\"op\">(</span>.F<span class=\"op\">(</span>Y<span class=\"op\">),</span></span>\n<span id=\"cb19-21\"><a aria-hidden=\"true\" href=\"#cb19-21\" tabindex=\"-1\"></a>                .I0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]));</span></span>\n<span id=\"cb19-22\"><a aria-hidden=\"true\" href=\"#cb19-22\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-23\"><a aria-hidden=\"true\" href=\"#cb19-23\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">2</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-24\"><a aria-hidden=\"true\" href=\"#cb19-24\" tabindex=\"-1\"></a>            LUT2 #<span class=\"op\">(</span>.INIT<span class=\"op\">(</span>LUT<span class=\"op\">))</span> _TECHMAP_REPLACE_ <span class=\"op\">(</span>.F<span class=\"op\">(</span>Y<span class=\"op\">),</span></span>\n<span id=\"cb19-25\"><a aria-hidden=\"true\" href=\"#cb19-25\" tabindex=\"-1\"></a>                .I0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .I1<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">]));</span></span>\n<span id=\"cb19-26\"><a aria-hidden=\"true\" href=\"#cb19-26\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-27\"><a aria-hidden=\"true\" href=\"#cb19-27\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">3</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-28\"><a aria-hidden=\"true\" href=\"#cb19-28\" tabindex=\"-1\"></a>            LUT3 #<span class=\"op\">(</span>.INIT<span class=\"op\">(</span>LUT<span class=\"op\">))</span> _TECHMAP_REPLACE_ <span class=\"op\">(</span>.F<span class=\"op\">(</span>Y<span class=\"op\">),</span></span>\n<span id=\"cb19-29\"><a aria-hidden=\"true\" href=\"#cb19-29\" tabindex=\"-1\"></a>                .I0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .I1<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">]),</span> .I2<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">2</span><span class=\"op\">]));</span></span>\n<span id=\"cb19-30\"><a aria-hidden=\"true\" href=\"#cb19-30\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-31\"><a aria-hidden=\"true\" href=\"#cb19-31\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">4</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-32\"><a aria-hidden=\"true\" href=\"#cb19-32\" tabindex=\"-1\"></a>            LUT4 #<span class=\"op\">(</span>.INIT<span class=\"op\">(</span>LUT<span class=\"op\">))</span> _TECHMAP_REPLACE_ <span class=\"op\">(</span>.F<span class=\"op\">(</span>Y<span class=\"op\">),</span></span>\n<span id=\"cb19-33\"><a aria-hidden=\"true\" href=\"#cb19-33\" tabindex=\"-1\"></a>                .I0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .I1<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">1</span><span class=\"op\">]),</span> .I2<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">2</span><span class=\"op\">]),</span> .I3<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">3</span><span class=\"op\">]));</span></span>\n<span id=\"cb19-34\"><a aria-hidden=\"true\" href=\"#cb19-34\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-35\"><a aria-hidden=\"true\" href=\"#cb19-35\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">5</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-36\"><a aria-hidden=\"true\" href=\"#cb19-36\" tabindex=\"-1\"></a>            <span class=\"dt\">wire</span> f0<span class=\"op\">,</span> f1<span class=\"op\">;</span></span>\n<span id=\"cb19-37\"><a aria-hidden=\"true\" href=\"#cb19-37\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">15</span><span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">4</span><span class=\"op\">))</span> lut0 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">3</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f0<span class=\"op\">));</span></span>\n<span id=\"cb19-38\"><a aria-hidden=\"true\" href=\"#cb19-38\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span><span class=\"dv\">16</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">4</span><span class=\"op\">))</span> lut1 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">3</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f1<span class=\"op\">));</span></span>\n<span id=\"cb19-39\"><a aria-hidden=\"true\" href=\"#cb19-39\" tabindex=\"-1\"></a>            MUX2_LUT5 mux5<span class=\"op\">(</span>.I0<span class=\"op\">(</span>f0<span class=\"op\">),</span> .I1<span class=\"op\">(</span>f1<span class=\"op\">),</span> .S0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">]),</span> .O<span class=\"op\">(</span>Y<span class=\"op\">));</span></span>\n<span id=\"cb19-40\"><a aria-hidden=\"true\" href=\"#cb19-40\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-41\"><a aria-hidden=\"true\" href=\"#cb19-41\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">6</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-42\"><a aria-hidden=\"true\" href=\"#cb19-42\" tabindex=\"-1\"></a>            <span class=\"dt\">wire</span> f0<span class=\"op\">,</span> f1<span class=\"op\">;</span></span>\n<span id=\"cb19-43\"><a aria-hidden=\"true\" href=\"#cb19-43\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">31</span><span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">5</span><span class=\"op\">))</span> lut0 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f0<span class=\"op\">));</span></span>\n<span id=\"cb19-44\"><a aria-hidden=\"true\" href=\"#cb19-44\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">63</span><span class=\"op\">:</span><span class=\"dv\">32</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">5</span><span class=\"op\">))</span> lut1 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">4</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f1<span class=\"op\">));</span></span>\n<span id=\"cb19-45\"><a aria-hidden=\"true\" href=\"#cb19-45\" tabindex=\"-1\"></a>            MUX2_LUT6 mux6<span class=\"op\">(</span>.I0<span class=\"op\">(</span>f0<span class=\"op\">),</span> .I1<span class=\"op\">(</span>f1<span class=\"op\">),</span> .S0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">]),</span> .O<span class=\"op\">(</span>Y<span class=\"op\">));</span></span>\n<span id=\"cb19-46\"><a aria-hidden=\"true\" href=\"#cb19-46\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-47\"><a aria-hidden=\"true\" href=\"#cb19-47\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">7</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-48\"><a aria-hidden=\"true\" href=\"#cb19-48\" tabindex=\"-1\"></a>            <span class=\"dt\">wire</span> f0<span class=\"op\">,</span> f1<span class=\"op\">;</span></span>\n<span id=\"cb19-49\"><a aria-hidden=\"true\" href=\"#cb19-49\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">63</span><span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">6</span><span class=\"op\">))</span> lut0 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f0<span class=\"op\">));</span></span>\n<span id=\"cb19-50\"><a aria-hidden=\"true\" href=\"#cb19-50\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">127</span><span class=\"op\">:</span><span class=\"dv\">64</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">6</span><span class=\"op\">))</span> lut1 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">5</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f1<span class=\"op\">));</span></span>\n<span id=\"cb19-51\"><a aria-hidden=\"true\" href=\"#cb19-51\" tabindex=\"-1\"></a>            MUX2_LUT7 mux7<span class=\"op\">(</span>.I0<span class=\"op\">(</span>f0<span class=\"op\">),</span> .I1<span class=\"op\">(</span>f1<span class=\"op\">),</span> .S0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">]),</span> .O<span class=\"op\">(</span>Y<span class=\"op\">));</span></span>\n<span id=\"cb19-52\"><a aria-hidden=\"true\" href=\"#cb19-52\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span></span>\n<span id=\"cb19-53\"><a aria-hidden=\"true\" href=\"#cb19-53\" tabindex=\"-1\"></a>        <span class=\"kw\">if</span> <span class=\"op\">(</span>WIDTH <span class=\"op\">==</span> <span class=\"dv\">8</span><span class=\"op\">)</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-54\"><a aria-hidden=\"true\" href=\"#cb19-54\" tabindex=\"-1\"></a>            <span class=\"dt\">wire</span> f0<span class=\"op\">,</span> f1<span class=\"op\">;</span></span>\n<span id=\"cb19-55\"><a aria-hidden=\"true\" href=\"#cb19-55\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">127</span><span class=\"op\">:</span> <span class=\"dv\">0</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">7</span><span class=\"op\">))</span> lut0 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f0<span class=\"op\">));</span></span>\n<span id=\"cb19-56\"><a aria-hidden=\"true\" href=\"#cb19-56\" tabindex=\"-1\"></a>            \\<span class=\"dt\">$lut</span> #<span class=\"op\">(</span>.LUT<span class=\"op\">(</span>LUT<span class=\"op\">[</span><span class=\"dv\">255</span><span class=\"op\">:</span><span class=\"dv\">128</span><span class=\"op\">]),</span> .WIDTH<span class=\"op\">(</span><span class=\"dv\">7</span><span class=\"op\">))</span> lut1 <span class=\"op\">(</span>.A<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">6</span><span class=\"op\">:</span><span class=\"dv\">0</span><span class=\"op\">]),</span> .Y<span class=\"op\">(</span>f1<span class=\"op\">));</span></span>\n<span id=\"cb19-57\"><a aria-hidden=\"true\" href=\"#cb19-57\" tabindex=\"-1\"></a>            MUX2_LUT8 mux8<span class=\"op\">(</span>.I0<span class=\"op\">(</span>f0<span class=\"op\">),</span> .I1<span class=\"op\">(</span>f1<span class=\"op\">),</span> .S0<span class=\"op\">(</span>A<span class=\"op\">[</span><span class=\"dv\">7</span><span class=\"op\">]),</span> .O<span class=\"op\">(</span>Y<span class=\"op\">));</span></span>\n<span id=\"cb19-58\"><a aria-hidden=\"true\" href=\"#cb19-58\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span> <span class=\"kw\">else</span> <span class=\"kw\">begin</span></span>\n<span id=\"cb19-59\"><a aria-hidden=\"true\" href=\"#cb19-59\" tabindex=\"-1\"></a>            <span class=\"dt\">wire</span> _TECHMAP_FAIL_ <span class=\"op\">=</span> <span class=\"dv\">1</span><span class=\"op\">;</span></span>\n<span id=\"cb19-60\"><a aria-hidden=\"true\" href=\"#cb19-60\" tabindex=\"-1\"></a>        <span class=\"kw\">end</span></span>\n<span id=\"cb19-61\"><a aria-hidden=\"true\" href=\"#cb19-61\" tabindex=\"-1\"></a>    <span class=\"kw\">endgenerate</span></span>\n<span id=\"cb19-62\"><a aria-hidden=\"true\" href=\"#cb19-62\" tabindex=\"-1\"></a><span class=\"kw\">endmodule</span></span></code></pre></div>\n<h3 id=\"writing-synth-stat-to-file\">Writing synth stat to file</h3>\n<pre><code>yosys&gt; stat -top NAME -json NAME_synth_stat.json\n</code></pre>\n<p><a href=\"https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/stat.html\">https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/stat.html</a></p>\n<h3 id=\"static-timing-analsys\">static timing analsys</h3>\n<p>yosys has sta but how to use??</p>\n<ul>\n<li><a href=\"https://github.com/YosysHQ/yosys/pull/2490\">https://github.com/YosysHQ/yosys/pull/2490</a></li>\n</ul>\n<h2 id=\"nextpnr-himbaechel\">nextpnr-himbaechel</h2>\n<ul>\n<li>New api for nextpnr</li>\n<li><a href=\"https://github.com/YosysHQ/apicula/wiki/Nextpnr%E2%80%90Himbaechel-Gowin\">https://github.com/YosysHQ/apicula/wiki/Nextpnr%E2%80%90Himbaechel-Gowin</a></li>\n<li>nextpnr-gowin is deprecated for end-user</li>\n</ul>\n</div>", "summary": "EDA with open source tools: yosys + nextpnr", "date_published": "2024-12-11T00:00:00+00:00", "tags": ["electronics"]}]}